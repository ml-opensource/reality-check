% warning = "This file was automatically generated and should not be edited."
// ${warning}

import Foundation
import RealityKit
% import json
% symbols_path = "../../../../../../RealitySymbols/source/reality-symbols/Sources/RealitySymbols/Extracted"

#if os(iOS)
% with open(f'{symbols_path}/iOS/Processed/Components.json') as file:
% data = json.load(file)

extension RealityPlatform.iOS.ComponentType {
  func makeCodable(from component: RealityKit.Component) -> RealityPlatform.iOS.Component {
    switch self {
      % for component in data:
      case .${component["name"][0].lower() + component["name"][1:]}:
        return .${component["name"][0].lower() + component["name"][1:]}(.init(rawValue: component))
      % end
    }
  }
}

#elseif os(macOS)
% with open(f'{symbols_path}/macOS/Processed/Components.json') as file:
% data = json.load(file)

extension RealityPlatform.macOS.ComponentType {
  func makeCodable(from component: RealityKit.Component) -> RealityPlatform.macOS.Component {
    switch self {
      % for component in data:
      case .${component["name"][0].lower() + component["name"][1:]}:
        return .${component["name"][0].lower() + component["name"][1:]}(.init(rawValue: component))
      % end
    }
  }
}

#elseif os(visionOS)
% with open(f'{symbols_path}/visionOS/Processed/Components.json') as file:
% data = json.load(file)

extension RealityPlatform.visionOS.ComponentType {
  func makeCodable(from component: RealityKit.Component) -> RealityPlatform.visionOS.Component {
    switch self {
      % for component in data:
      case .${component["name"][0].lower() + component["name"][1:]}:
        return .${component["name"][0].lower() + component["name"][1:]}(.init(rawValue: component as! ${component["name"]}))
      % end
    }
  }
}

#endif
