% warning = "This file was automatically generated and should not be edited."
// ${warning}

import Foundation
import RealityKit
% import json
% symbols_path = "../../../../../../RealitySymbols/source/reality-symbols/Sources/RealitySymbols/Extracted"

//MARK: - iOS

% with open(f'{symbols_path}/iOS/Processed/Components.json') as file:
% data = json.load(file)

extension RealityPlatform.iOS {
  public enum Component: Codable, Hashable {
    % for component in data:
    case ${component["name"][0].lower() + component["name"][1:]}(${component["name"]})
    % end
  }
}

extension RealityPlatform.iOS.Component: CustomStringConvertible {
  public var description: String {
    switch self {
    % for component in data:
    case .${component["name"][0].lower() + component["name"][1:]}:
      return "${component["name"]}"
    % end
    }
  }
}

extension RealityPlatform.iOS {
  % for component in data:
  public struct ${component["name"]}: Codable, Hashable {
    % for property in component["properties"]:
    //TODO: self.${property["name"]} = entity.${property["type"]}
    % end
    init(rawValue: RealityKit.Component) {}
  }

  % end
}

//MARK: - macOS

% with open(f'{symbols_path}/macOS/Processed/Components.json') as file:
% data = json.load(file)

extension RealityPlatform.macOS {
  public enum Component: Codable, Hashable {
    % for component in data:
    case ${component["name"][0].lower() + component["name"][1:]}(${component["name"]})
    % end
  }
}

extension RealityPlatform.macOS.Component: CustomStringConvertible {
  public var description: String {
    switch self {
      % for component in data:
      case .${component["name"][0].lower() + component["name"][1:]}:
        return "${component["name"]}"
      % end
    }
  }
}

extension RealityPlatform.macOS {
  % for component in data:
  public struct ${component["name"]}: Codable, Hashable {
    % for property in component["properties"]:
    //TODO: self.${property["name"]} = entity.${property["type"]}
    % end
    init(rawValue: RealityKit.Component) {}
  }

  % end
}

//MARK: - visionOS

% with open(f'{symbols_path}/visionOS/Processed/Components.json') as file:
% data = json.load(file)

extension RealityPlatform.visionOS {
  public enum Component: Codable, Hashable {
    % for component in data:
    case ${component["name"][0].lower() + component["name"][1:]}(${component["name"]})
    % end
  }
}

extension RealityPlatform.visionOS.Component: CustomStringConvertible {
  public var description: String {
    switch self {
    % for component in data:
    case .${component["name"][0].lower() + component["name"][1:]}:
      return "${component["name"]}"
    % end
    }
  }
}

extension RealityPlatform.visionOS.Component {
  public var comment: String? {
    switch self {
    % for component in data:
    case .${component["name"][0].lower() + component["name"][1:]}(let value):
      return value.comment
    % end
    }
  }
}

extension RealityPlatform.visionOS {
  % for component in data:
  public struct ${component["name"]}: Codable, Hashable {
    % for property in component["properties"]:
    % if component["name"] == "Transform":
    public ${property["complete"]}
    % else:
    //TODO: public ${property["complete"]}
    %end
    %end
    public var comment: String?
    
    #if os(visionOS)
    init(rawValue component: RealityKit.${component["name"]}) {
      % for property in component["properties"]:
      % if component["name"] == "Transform":
      self.${property["name"]} = component.${property["name"]}
      % else:
      //TODO: self.${property["name"]} = component.${property["name"]}
      % end
      % end
      % if "comment" in component:
      self.comment = """
      ${component["comment"]}
      """
      % end
    }
    #endif
  }

  % end
}
